import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import speech_recognition as sr
from deep_translator import GoogleTranslator
import time, random
import os

# –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏
class PronunciationGame:
    def __init__(self):
        self.score = 0
        self.rounds_played = 0
        self.max_rounds = 10
        self.max_mistakes = 3
        self.mistakes = 0
        self.difficulty = None

        # –°–ª–æ–≤–∞—Ä–∏ —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.words_by_level = {
            "easy": ["–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "—è–±–ª–æ–∫–æ", "–º–æ–ª–æ–∫–æ", "—Å–æ–ª–Ω—Ü–µ", "–¥–æ–º", "–∫–Ω–∏–≥–∞", "—Å—Ç–æ–ª", "–≤–æ–¥–∞", "—Ü–≤–µ—Ç–æ–∫"],
            "medium": ["–±–∞–Ω–∞–Ω", "—à–∫–æ–ª–∞", "–¥—Ä—É–≥", "–æ–∫–Ω–æ", "–∂—ë–ª—Ç—ã–π", "–º–∞—à–∏–Ω–∞", "–º—É–∑—ã–∫–∞", "–ø–æ–≥–æ–¥–∞", "—Å–µ–º—å—è", "—Ä–∞–±–æ—Ç–∞"],
            "hard": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ", "–≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
        }

    def get_difficulty(self):
        """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        while True:
            print("\nüéØ –í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò:")
            print("1. –õ–µ–≥–∫–∏–π (–ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞) üåü")
            print("2. –°—Ä–µ–¥–Ω–∏–π (—Å–ª–æ–≤–∞ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏) ‚ö°")
            print("3. –°–ª–æ–∂–Ω—ã–π (—Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞) üî•")

            try:
                choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
                if choice == "1":
                    self.difficulty = "easy"
                    return
                elif choice == "2":
                    self.difficulty = "medium"
                    return
                elif choice == "3":
                    self.difficulty = "hard"
                    return
                else:
                    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3!")
            except:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def get_random_word(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not self.difficulty:
            return None
        return random.choice(self.words_by_level[self.difficulty])

    def calculate_similarity(self, user_word, correct_word):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)"""
        user_word = user_word.lower().strip()
        correct_word = correct_word.lower().strip()

        # –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if user_word == correct_word:
            return 100

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        if correct_word in user_word or user_word in correct_word:
            return 80

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        common_chars = set(user_word) & set(correct_word)
        if len(common_chars) >= len(correct_word) * 0.6:
            return 60

        return 0

    def play_round(self):
        """–ò–≥—Ä–∞—Ç—å –æ–¥–∏–Ω —Ä–∞—É–Ω–¥"""
        word = self.get_random_word()
        if not word:
            return False

        print(f"\nüéØ –†–ê–£–ù–î {self.rounds_played + 1}/{self.max_rounds}")
        print("=" * 50)
        print(f"üìù –ó–ê–ì–ê–î–ê–ù–ù–û–ï –°–õ–û–í–û: {word.upper()}")
        print("=" * 50)

        print("üé§ –ì–û–í–û–†–ò–¢–ï –°–õ–û–í–û...")
        print("‚è∞ –£ –≤–∞—Å 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        time.sleep(1)

        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        duration = 3
        sample_rate = 44100
        recording = sd.rec(
            int(duration * sample_rate),
            samplerate=sample_rate,
            channels=1,
            dtype="int16"
        )
        sd.wait()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        wav.write("output.wav", sample_rate, recording)
        print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        recognizer = sr.Recognizer()
        try:
            with sr.AudioFile("output.wav") as source:
                audio = recognizer.record(source)

            text = recognizer.recognize_google(audio, language="ru-RU")
            print(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏: '{text}'")

            # –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            translated = GoogleTranslator(source='auto', target='ru').translate(text)
            print(f"üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫: '{translated}'")

            # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            similarity = self.calculate_similarity(translated, word)

            if similarity >= 80:
                self.score += 10
                self.rounds_played += 1
                print("üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ! +10 –æ—á–∫–æ–≤")
                print(f"üíé –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {self.score}")
                return True
            else:
                self.mistakes += 1
                print(f"üòî –ù–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
                print(f"‚ùå –û—à–∏–±–∫–∏: {self.mistakes}/{self.max_mistakes}")
                return False

        except sr.UnknownValueError:
            self.mistakes += 1
            print("ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ!")
            print(f"‚ùå –û—à–∏–±–∫–∏: {self.mistakes}/{self.max_mistakes}")
            return False
        except sr.RequestError as e:
            print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã"""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´")
        print("="*60)
        print(f"üéØ –°—ã–≥—Ä–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {self.rounds_played}")
        print(f"üíé –ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤: {self.score}")
        print(f"‚ùå –î–æ–ø—É—â–µ–Ω–æ –æ—à–∏–±–æ–∫: {self.mistakes}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç –∑–∞ —Ä–∞—É–Ω–¥: {self.score/self.rounds_played if self.rounds_played > 0 else 0:.1f}")
        print("="*60)

    def is_game_over(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞"""
        return self.rounds_played >= self.max_rounds or self.mistakes >= self.max_mistakes

    def get_game_over_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã"""
        if self.rounds_played >= self.max_rounds:
            return "üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ä–∞—É–Ω–¥—ã!"
        else:
            return "üíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫!"

def main():
    print("üé§ –ò–ì–†–ê '–ü–†–û–í–ï–†–¨ –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–ï'")
    print("="*50)
    print("üéØ –¶–µ–ª—å: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!")
    print("üìù –ü—Ä–∞–≤–∏–ª–∞:")
    print("  - –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ")
    print("  - –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –æ—à–∏–±–∫—É")
    print("  - –ú–∞–∫—Å–∏–º—É–º 10 —Ä–∞—É–Ω–¥–æ–≤")
    print("  - –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ +10 –æ—á–∫–æ–≤")
    print("="*50)

    game = PronunciationGame()

    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    game.get_difficulty()

    print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ò–ì–†–£! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {game.difficulty.upper()}")
    print("üéÆ –£–¥–∞—á–∏!\n")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while not game.is_game_over():
        success = game.play_round()

        if not success and game.mistakes < game.max_mistakes:
            print("üîÑ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç–æ –∂–µ —Å–ª–æ–≤–æ –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç)")
            retry = input().lower().strip()
            if retry in ['–¥–∞', 'yes', '–¥', 'y']:
                continue
            else:
                game.rounds_played += 1

        if game.rounds_played < game.max_rounds:
            print("\n‚è≠Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? (–¥–∞/–Ω–µ—Ç)")
            cont = input().lower().strip()
            if cont not in ['–¥–∞', 'yes', '–¥', 'y']:
                break

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    game.show_stats()
    print(f"\n{game.get_game_over_message()}")

    # –û—á–∏—Å—Ç–∫–∞
    if os.path.exists("output.wav"):
        os.remove("output.wav")

    print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()
